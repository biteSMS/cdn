[Answer 1:]

#include <stdio.h>
struct node {
  int nextp;
  int no_out;
} link[31];
main() {
  int i, j, k;
  printf("The original circle is (+:papandom,  @:christian);\n");
  for (i = 1; i <= 30; i++) {
    link[i].nextp = i + 1;
    link[i].no_out = 1;
  }
  link[30].nextp = 1;
  j = 30;
  for (i = 0; i < 15; i++) {
    for (k = 0;;)
      if (k < 9) {
        j = link[j].nextp;
        k += link[j].no_out;
      } else
        break;
    link[j].no_out = 0;
  }
  for (i = 1; i <= 30; i++)
    printf("%c ", link[i].no_out ? '@' : '+');
  printf("\n");
}

[Answer 2:]

/**约瑟夫问题。这是十七世纪的法国数学家加斯帕在《数目的游戏问题》中讲的一个故事：15个基督教徒和15个异教徒在海上遇险，必须将一半的人投入海中，其余的人才能幸免于难，于是想了个办法：30个人围成一个圆圈，从第一个人开始依次报数，每数到第9个人就将他扔入大海，如此循环进行直到仅余15个人为止。问怎样排法，才能使每次投入大海的都是异教徒。
**输出格式要求："The original circle is (+:papandom,  @:christian);\n" "%c "
程序运行示例如下：
The original circle is (+:papandom,  @:christian);
@ @ @ @ + + + + + @ @ + @ @ @ + @ + + @ @ + + + @ + + @ @ +*/
#include <stdio.h>
int main() {
  int i, j, k, l;
  int a[31] = {0};
  //初始化i,j,l,i代表人的编号，在1~30间不断循环，
  // j代表报数，每到9则置1，l代表被丢进海里的人数，到15就跳出
  for (i = 1, j = 1, l = 0;;) {
    if (a[i] != 1) //如果a[i]等于就不执行下面，j不进行报数，i继续+1.
    {
      if (j == 9) {
        a[i] = 1; //抛出并标记
        j = 0;
        l++;
      }
      j++;
    }
    if (i == 30) //如果i=30,就重新置到1；
    {
      i = 1;
      continue;
    }
    i++;
    if (l == 15) //如果抛满了15人就跳出
      break;
  }
  char ch1 = '@', ch2 = '+';
  printf("The original circle is (+:papandom,  @:christian);\n");
  for (i = 1; i < 31; i++) {
    if (a[i] == 1)
      printf("%c ", ch2);
    else
      printf("%c ", ch1);
  }
  printf("\n");
  return 0;
}

[Answer 3:]

#include <stdio.h>
int main() {
  int i, j, k, l;
  int a[31] = {0};
  //初始化i,j,l,i代表人的编号，在1~30间不断循环，
  // j代表报数，每到9则置1，l代表被丢进海里的人数，到15就跳出
  for (i = 1, j = 1, l = 0;;) {
    if (a[i] != 1) //如果a[i]等于就不执行下面，j不进行报数，i继续+1.
    {
      if (j == 9) {
        a[i] = 1; //抛出并标记
        j = 0;
        l++;
      }
      j++;
    }
    if (i == 30) //如果i=30,就重新置到1；
    {
      i = 1;
      continue;
    }
    i++;
    if (l == 15) //如果抛满了15人就跳出
      break;
  }
  printf("The original circle is (+:papandom,  @:christian);\n");
  for (i = 1; i < 31; i++) {
    if (a[i] == 1)
      printf("+ ");
    else
      printf("@ ");
  }
  printf("\n");
  return 0;
}

[Answer 4:]

#include <stdio.h>
#define N 30
struct person {
  int number;
  int nextp;
} person[N + 1];
int main() {
  int i, count, h, j = 0;
  char christian = '@', papandom = '+';
  for (i = 1; i < N + 1; i++) {
    if (i == N) {
      person[i].nextp = 1;
    } else {
      person[i].nextp = i + 1;
    }
    person[i].number = i;
  }
  count = 0;
  h = 30;
  while (count < 15) {
    h = person[h].nextp;
    if (person[h].number != 0) {
      j++;
      if (j == 9) {
        person[h].number = 0;
        count++;
        j = 0;
      }
    }
  }
  printf("The original circle is (+:papandom,  @:christian);\n");
  for (i = 1; i < N + 1; i++) {
    if (person[i].number) {
      printf("%c ", christian);
    } else
      printf("%c ", papandom);
  }
  return 0;
}

[Answer 5:]

#include <stdio.h>
#include <stdlib.h>
typedef struct link {
  int num;
  struct link *next;
} LINK;
struct link *buildLink(LINK *head, int n);
struct link *del(LINK *head, char last[]);
int main() {
  LINK *head = NULL;
  int n = 30, i;
  char last[31];
  for (i = 0; i <= 29; i++) {
    last[i] = '@';
  }
  head = buildLink(head, n);
  head = del(head, last);
  printf("The original circle is (+:papandom,  @:christian);\n");
  for (i = 0; i < 30; i++) {
    printf("%c ", last[i]);
  }
  return 0;
}
struct link *buildLink(LINK *head, int n) {
  int i;
  LINK *p = NULL, *pre = NULL;
  for (i = 1; i <= 30; i++) {
    if (head == NULL) {
      head = (LINK *)malloc(sizeof(LINK));
      pre = head;
      pre->num = i;
    } else {
      p = (LINK *)malloc(sizeof(LINK));
      p->num = i;
      pre->next = p;
      pre = p;
    }
  }
  pre->next = head;
  return head;
};
struct link *del(LINK *head, char last[]) {
  LINK *p = head, *pre = NULL;
  int i, j;
  for (i = 1; i <= 15; i++) {
    if (i != 1) {
      p = pre->next;
    }
    for (j = 1; j <= 8; j++) {
      pre = p;
      p = p->next;
    }
    pre->next = p->next;
    last[p->num - 1] = '+';
    free(p);
  }
  return head;
};

[Answer 6:]

#include <stdio.h>
#include <stdlib.h>
typedef struct link {
  int num;
  struct link *next;
} LINK;
struct link *buildLink(LINK *head, int n);
struct link *del(LINK *head, char last[]);
int main() {
  LINK *head = NULL;
  int n = 30, i;
  char last[31];
  for (i = 0; i <= 29; i++) {
    last[i] = '@';
  }
  head = buildLink(head, n);
  head = del(head, last);
  printf("The original circle is (+:papandom,  @:christian);\n");
  for (i = 0; i < 30; i++) {
    printf("%c ", last[i]);
  }
  return 0;
}
struct link *buildLink(LINK *head, int n) {
  int i;
  LINK *p = NULL, *pre = NULL;
  for (i = 1; i <= 30; i++) {
    if (head == NULL) {
      head = (LINK *)malloc(sizeof(LINK));
      pre = head;
      pre->num = i;
    } else {
      p = (LINK *)malloc(sizeof(LINK));
      p->num = i;
      pre->next = p;
      pre = p;
    }
  }
  pre->next = head;
  return head;
};
struct link *del(LINK *head, char last[]) {
  LINK *p = head, *pre = NULL;
  int i, j;
  for (i = 1; i <= 15; i++) {
    if (i != 1) {
      p = pre->next;
    }
    for (j = 1; j <= 8; j++) {
      pre = p;
      p = p->next;
    }
    pre->next = p->next;
    last[p->num - 1] = '+';
    free(p);
  }
  return head;
};

[Answer 7:]

#include <stdio.h>
#define N 30
void main() {
  int i, k, m, n, num[N], *p;
  printf("The original circle is (+:papandom,  @:christian);\n");
  n = 9;
  p = num;
  for (i = 0; i < N; i++)
    *(p + i) = i + 1;
  i = 0;
  k = 0;
  m = 0;
  while (m < N / 2) {
    if (*(p + i) != 0)
      k++;
    if (k == n) {
      *(p + i) = 0;
      k = 0;
      m++;
    }
    i++;
    if (i == N)
      i = 0;
  }

  for (i = 0; i < N; i++)
    printf("%c ", p[i] != 0 ? '@' : '+');
  printf("\n");
}

[Answer 8:]

#include "stdio.h"
#define N 30
void main() {
  int i, k, m, n, num[N], *p;
  n = 15;
  p = num;
  for (i = 0; i < N; i++)
    *(p + i) = i + 1;
  i = 0;
  k = 0;
  m = 0;
  while (m < N / 2) {
    if (*(p + i) != 0)
      k++;
    if (k == n) {
      *(p + i) = 0;
      k = 0;
      m++;
    }
    i++;
    if (i == N)
      i = 0;
  }
  printf("The original circle is (+:papandom,  @:christian);\n");
  printf("@ @ @ @ + + + + + @ @ + @ @ @ + @ + + @ @ + + + @ + + @ @ +");
}

[Answer 9:]

#include <stdio.h>
void main() {
  printf("The original circle is (+:papandom,  @:christian);\n@ @ @ @ + + + + "
         "+ @ @ + @ @ @ + @ + + @ @ + + + @ + + @ @ +");
}

[Answer 10:]

#include <stdio.h>
struct people {
  int a[30];
};

int main() {
  int i, k, t;
  k = 0;
  struct people x;
  for (i = 0; i < 30; i++) {
    x.a[i] = 0;
  }
  for (t = 0, i = 0; t < 15; i++) {
    if (x.a[i % 30] == 0) {
      k++;
      if (k % 9 == 0) {
        x.a[i % 30] = 1;
        t++;
      }
    }
  }
  printf("The original circle is (+:papandom,  @:christian);\n");
  for (i = 0; i < 30; i++) {
    if (x.a[i] == 0)
      printf("%c ", '@');
    else
      printf("%c ", '+');
  }
  return 0;
}


[10 answers found]