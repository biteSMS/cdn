[Answer 1:]

#include <stdio.h>
#include <string.h>
struct date_rec {
  int day;
  int month;
  int year;
};
void input_date(struct date_rec *current_date) {
  printf("请输入当前日期（年 月 日）：");
  scanf("%d%d%d", &(current_date->year), &(current_date->month),
        &current_date->day);
}
void increment_date(struct date_rec *current_date) {
  if ((current_date->year % 4 == 0 && current_date->year % 100 != 0) ||
      current_date->year % 400 == 0) {
    if (current_date->month == 2 &&
        (0 <= current_date->day && current_date->day <= 28)) {
      current_date->day++;
    } else if (current_date->month == 2 && current_date->day == 29) {
      current_date->day = 0;
      current_date->month = 3;
    }
    if (current_date->month == 1 &&
        (0 <= current_date->day && current_date->day <= 30)) {
      current_date->day++;
    } else if (current_date->month == 1 && current_date->day == 31) {
      current_date->day = 0;
      current_date->month = 2;
    }
    if (current_date->month == 3 &&
        (0 <= current_date->day && current_date->day <= 30)) {
      current_date->day++;
    } else if (current_date->month == 3 && current_date->day == 31) {
      current_date->day = 0;
      current_date->month = 4;
    }
    if (current_date->month == 4 &&
        (0 <= current_date->day && current_date->day <= 29)) {
      current_date->day++;
    } else if (current_date->month == 4 && current_date->day == 30) {
      current_date->day = 0;
      current_date->month = 5;
    }
    if (current_date->month == 5 &&
        (0 <= current_date->day && current_date->day <= 30)) {
      current_date->day++;
    } else if (current_date->month == 5 && current_date->day == 31) {
      current_date->day = 0;
      current_date->month = 6;
    }
    if (current_date->month == 6 &&
        (0 <= current_date->day && current_date->day <= 29)) {
      current_date->day++;
    } else if (current_date->month == 6 && current_date->day == 30) {
      current_date->day = 0;
      current_date->month = 7;
    }
    if (current_date->month == 7 &&
        (0 <= current_date->day && current_date->day <= 30)) {
      current_date->day++;
    } else if (current_date->month == 7 && current_date->day == 31) {
      current_date->day = 0;
      current_date->month = 8;
    }
    if (current_date->month == 8 &&
        (0 <= current_date->day && current_date->day <= 30)) {
      current_date->day++;
    } else if (current_date->month == 8 && current_date->day == 31) {
      current_date->day = 0;
      current_date->month = 9;
    }
    if (current_date->month == 9 &&
        (0 <= current_date->day && current_date->day <= 29)) {
      current_date->day++;
    } else if (current_date->month == 9 && current_date->day == 30) {
      current_date->day = 0;
      current_date->month = 10;
    }
    if (current_date->month == 10 &&
        (0 <= current_date->day && current_date->day <= 30)) {
      current_date->day++;
    } else if (current_date->month == 10 && current_date->day == 31) {
      current_date->day = 0;
      current_date->month = 11;
    }
    if (current_date->month == 11 &&
        (0 <= current_date->day && current_date->day <= 29)) {
      current_date->day++;
    } else if (current_date->month == 11 && current_date->day == 30) {
      current_date->day = 0;
      current_date->month = 12;
    }
    if (current_date->month == 12 &&
        (0 <= current_date->day && current_date->day <= 30)) {
      current_date->day++;
    } else if (current_date->month == 12 && current_date->day == 31) {
      current_date->day = 0;
      current_date->month = 1;
      current_date->year++;
    }
  } else {
    if (current_date->month == 2 &&
        (0 <= current_date->day && current_date->day <= 27)) {
      current_date->day++;
    } else if (current_date->month == 2 && current_date->day == 28) {
      current_date->day = 0;
      current_date->month = 3;
    }
    if (current_date->month == 1 &&
        (0 <= current_date->day && current_date->day <= 30)) {
      current_date->day++;
    } else if (current_date->month == 1 && current_date->day == 31) {
      current_date->day = 0;
      current_date->month = 2;
    }
    if (current_date->month == 3 &&
        (0 <= current_date->day && current_date->day <= 30)) {
      current_date->day++;
    } else if (current_date->month == 3 && current_date->day == 31) {
      current_date->day = 0;
      current_date->month = 4;
    }
    if (current_date->month == 4 &&
        (0 <= current_date->day && current_date->day <= 29)) {
      current_date->day++;
    } else if (current_date->month == 4 && current_date->day == 30) {
      current_date->day = 0;
      current_date->month = 5;
    }
    if (current_date->month == 5 &&
        (0 <= current_date->day && current_date->day <= 30)) {
      current_date->day++;
    } else if (current_date->month == 5 && current_date->day == 31) {
      current_date->day = 0;
      current_date->month = 6;
    }
    if (current_date->month == 6 &&
        (0 <= current_date->day && current_date->day <= 29)) {
      current_date->day++;
    } else if (current_date->month == 6 && current_date->day == 30) {
      current_date->day = 0;
      current_date->month = 7;
    }
    if (current_date->month == 7 &&
        (0 <= current_date->day && current_date->day <= 30)) {
      current_date->day++;
    } else if (current_date->month == 7 && current_date->day == 31) {
      current_date->day = 0;
      current_date->month = 8;
    }
    if (current_date->month == 8 &&
        (0 <= current_date->day && current_date->day <= 30)) {
      current_date->day++;
    } else if (current_date->month == 8 && current_date->day == 31) {
      current_date->day = 0;
      current_date->month = 9;
    }
    if (current_date->month == 9 &&
        (0 <= current_date->day && current_date->day <= 29)) {
      current_date->day++;
    } else if (current_date->month == 9 && current_date->day == 30) {
      current_date->day = 0;
      current_date->month = 10;
    }
    if (current_date->month == 10 &&
        (0 <= current_date->day && current_date->day <= 30)) {
      current_date->day++;
    } else if (current_date->month == 10 && current_date->day == 31) {
      current_date->day = 0;
      current_date->month = 11;
    }
    if (current_date->month == 11 &&
        (0 <= current_date->day && current_date->day <= 29)) {
      current_date->day++;
    } else if (current_date->month == 11 && current_date->day == 30) {
      current_date->day = 0;
      current_date->month = 12;
    }
    if (current_date->month == 12 &&
        (0 <= current_date->day && current_date->day <= 30)) {
      current_date->day++;
    } else if (current_date->month == 12 && current_date->day == 31) {
      current_date->day = 0;
      current_date->month = 1;
      current_date->year++;
    }
  }
}
void output_date(struct date_rec *current_date) {
  printf("当前日期：%d年%d月%d日！", current_date->year, current_date->month,
         current_date->day);
}
void main() {
  struct date_rec current_date;
  input_date(&current_date);
  increment_date(&current_date);
  output_date(&current_date);
}

[Answer 2:]

#include <stdio.h>
#include <stdlib.h>

struct date_rec {
  int day;
  int month;
  int year;
};
struct date_rec current_date;

void input_date(struct date_rec *current_date);
void increment_date(struct date_rec *current_date);
void output_date(struct date_rec *current_date);

int main() {
  struct date_rec *p = &current_date;
  input_date(p);
  increment_date(p);
  output_date(p);
  return 0;
}

void input_date(struct date_rec *current_date) {
  printf("请输入当前日期（年 月 日）：");
  scanf("%d%d%d", &((*current_date).year), &((*current_date).month),
        &((*current_date).day));
}

void increment_date(struct date_rec *current_date) {
  if (current_date->month == 6 && current_date->day == 30) {
    current_date->month++;
    current_date->day = 1;
  } else if (current_date->year != 2000 && current_date->month == 2 &&
             current_date->day == 28) {
    current_date->month++;
    current_date->day = 1;
  } else if (current_date->year == 2000 && current_date->month == 2 &&
             current_date->day == 28) {
    current_date->day++;
  } else
    current_date->day++;
}

void output_date(struct date_rec *current_date) {
  printf("当前日期：%d年%d月%d日！", (*current_date).year,
         (*current_date).month, (*current_date).day);
}

[Answer 3:]

#include <stdio.h>
/*给定如下定义：
struct date_rec
  {
    int day ;
    int month ;
    int year ;
  } ;
  struct date_rec current_date ;
写一个程序包含如下的函数，完成：
(a) ///输入current_date的值：
void input_date(struct date_rec *current_date)
(b) ///将current_date增加1天：
void increment_date(struct date_rec *current_date)
(c) ///显示current_date的值：
void output_date(struct date_rec *current_date)
//考虑每个月的实际天数，同时也考虑闰年的情况。
**输入格式要求："%d%d%d" 提示信息："请输入当前日期（年 月 日）："
**输出格式要求："当前日期：%d年%d月%d日！" （加1天后的新日期）*/
struct date_rec {
  int day;
  int month;
  int year;
};
///输入current_date的值：
void input_date(struct date_rec *current_date) {
  scanf("%d%d%d", &current_date->year, &current_date->month,
        &current_date->day);
}
///将current_date增加1天：
void increment_date(struct date_rec *current_date) {
  int day = current_date->day, month = current_date->month,
      year = current_date->year;
  int upday = 0;
  switch (month) //根据月份求upday
  {
  case 1:
  case 3:
  case 5:
  case 7:
  case 8:
  case 10:
  case 12:
    upday = 31;
    break; ///大月
  case 2:
    if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0))
      upday = 29; ///闰年
    else
      upday = 28; ///非闰年
    break;
  default:
    upday = 30;
  }
  if (day < upday)
    current_date->day++;
  else {
    current_date->month++;
    current_date->day = 1;
  }
}
///显示current_date的值：
void output_date(struct date_rec *current_date) {
  printf("当前日期：%d年%d月%d日！", current_date->year, current_date->month,
         current_date->day);
}
void main() {
  struct date_rec current_date;
  printf("请输入当前日期（年 月 日）：");
  input_date(&current_date);
  increment_date(&current_date);
  output_date(&current_date);
}


[3 answers found]