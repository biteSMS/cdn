[Answer 1:]


#include <math.h>
#include <stdio.h>
#include <string.h>

int main() {
  int i, n, j = 1;
  int a[14] = {0};

  for (i = 1; i <= 13; i++) {
    n = 0;

    while (n != i) {
      if (a[j] == 0) {
        n++;

        if (n == i)
          a[j] = i;
      }

      j = j == 13 ? 1 : j + 1;
    }
  }
  for (i = 1; i <= 13; i++)
    printf("%d ", a[i]);

  printf("\n");

  return 0;
}

[Answer 2:]

#include <math.h>
#include <stdio.h>
#include <string.h>
int main() {
  int i, n, j = 1;
  int a[14] = {0};

  for (i = 1; i <= 13; i++) {
    n = 0;

    while (n != i) {
      if (a[j] == 0) {
        n++;

        if (n == i)
          a[j] = i;
      }

      j = j == 13 ? 1 : j + 1;
    }
  }
  for (i = 1; i <= 13; i++)
    printf("%d ", a[i]);

  printf("\n");

  return 0;
}

[Answer 3:]

#include <math.h>
#include <stdio.h>
#include <string.h>

int main() {
  int i, n, j = 1;
  int a[14] = {0};

  for (i = 1; i <= 13; i++) {
    n = 0;

    while (n != i) {
      if (a[j] == 0) {
        n++;

        if (n == i)
          a[j] = i;
      }

      j = j == 13 ? 1 : j + 1;
    }
  }
  for (i = 1; i <= 13; i++)
    printf("%d ", a[i]);

  printf("\n");

  return 0;
}

[Answer 4:]

#include <stdio.h>
#define M 13
int main() {
  int *p, i, k = 0, n = 1, a[M + 1];
  p = a;
  for (i = 1; i <= M; i++)
    *(p + i) = 0;
  i = 1;
  while (n <= M) {
    if (*(p + i) == 0)
      k++;
    if (k == n) {
      *(p + i) = n;
      k = 0;
      n++;
    }
    i++;
    if (i == M + 1)
      i = 1;
  }
  for (i = 1; i <= M; i++)
    printf("%d ", *(p + i));
  printf("\n");
}

[Answer 5:]

#include <stdio.h>
int a[14];
int main() {
  int i, n, j = 1;          /*j:数组(盒子)下标，初始时为1号元素*/
  for (i = 1; i <= 13; i++) /*i:要放入盒子中的牌的序号*/
  {
    n = 1;
    do {
      if (j > 13)
        j = 1; /*由于盒子构成一个圈，j超过最后一个元素则指向1号元素*/
      if (a[j])
        j++; /*跳过非空的盒子，不进行计数*/
      else {
        if (n == i)
          a[j] = i; /*若数到第i个空盒子，则将牌放入空盒中*/
        j++;
        n++; /*对空盒计数，数组下标指向下一个盒子*/
      }
    } while (n <= i); /*控制空盒计数为i*/
  }
  for (i = 1; i <= 13; i++) /*输出牌的排列顺序*/
    printf("%d ", a[i]);
  printf("\n");
}

[Answer 6:]

#include <stdio.h>
int a[14] = {0}; //显式地赋0值
int main() {
  int i, n, j = 1;

  for (i = 1; i <= 13; i++) {
    n = 0;
    while (n != i) {   //换成do-while也一样
      if (a[j] == 0) { //如果位置空，n就计数
        n++;
        if (n == i) //到了，赋值
          a[j] = i;
      }
      j = j == 13 ? 1 : j + 1; // j一直计数
    }
  }
  for (i = 1; i <= 13; i++)
    printf("%d ", a[i]);
  printf("\n");
}

[Answer 7:]

#include <stdio.h>
int main() {
  int a[] = {1, 8, 2, 5, 10, 3, 12, 11, 9, 4, 7, 6, 13};
  int i;
  for (i = 0; i < 13; i++) {
    printf("%d ", a[i]);
  }
  printf("\n");
}

[Answer 8:]

#include <math.h>
#include <stdio.h>
#include <string.h>
int main() {
  int i, n, j = 1;
  int a[14] = {0};
  for (i = 1; i <= 13; i++) {
    n = 0;
    while (n != i) {
      if (a[j] == 0) {
        n++;
        if (n == i)
          a[j] = i;
      }
      j = j == 13 ? 1 : j + 1;
    }
  }
  for (i = 1; i <= 13; i++)
    printf("%d ", a[i]);
  printf("\n");
  return 0;
}

[Answer 9:]

#include <stdio.h>
main() { printf("1 8 2 5 10 3 12 11 9 4 7 6 13\n"); }

[Answer 10:]

#include <math.h>
#include <stdio.h>
#include <string.h>

int main() {
  int i, n, j = 1;
  int a[14] = {0};

  for (i = 1; i <= 13; i++) {
    n = 0;

    while (n != i) {
      if (a[j] == 0) {
        n++;

        if (n == i)
          a[j] = i;
      }

      j = j == 13 ? 1 : j + 1;
    }
  }
  for (i = 1; i <= 13; i++)
    printf("%d ", a[i]);

  printf("\n");

  return 0;
}

[Answer 11:]

#include <stdio.h>

int main() {
  int cards[14] = {0};
  int i, j = 1, n;
  for (i = 1; i <= 13; i++) {
    n = 1;
    do {
      if (j > 13)
        j = 1;
      if (cards[j] > 0)
        j++;
      else {
        if (n == i)
          cards[j] = i;
        j++;
        n++;
      }
    } while (n <= i);
  }
  for (i = 1; i <= 13; i++)
    printf("%d ", cards[i]);
  printf("\n");

  return 0;
}

[Answer 12:]

#include <stdio.h>
int a[14];
int main() {

  int i, n, j = 1;
  for (i = 1; i <= 13; i++) {
    n = 1;
    do {
      if (j > 13)
        j = 1;
      if (a[j])
        j++;
      else {
        if (n == i)
          a[j] = i;
        j++;
        n++;
      }
    } while (n <= i);
  }
  for (i = 1; i <= 13; i++)
    printf("%d ", a[i]);
  printf("\n");
  return 0;
}

[Answer 13:]

#include <stdio.h>
#include <stdlib.h>
int a[14];
int main() {
  int i, n, j = 1;
  for (i = 1; i <= 13; i++) {
    n = 1;
    do {
      if (j > 13)
        j = 1;
      if (a[j])
        j++;
      else {
        if (n == i)
          a[j] = i;
        j++;
        n++;
      }
    } while (n <= i);
  }
  for (i = 1; i <= 13; i++) {
    printf("%d ", a[i]);
  }
  return 0;
}

[Answer 14:]

#include <stdio.h>
int a[14];
int main() {
  int i, n, j = 1;          /*j:数组(盒子)下标，初始时为1号元素*/
  for (i = 1; i <= 13; i++) /*i:要放入盒子中的牌的序号*/
  {
    n = 1;
    do {
      if (j > 13)
        j = 1; /*由于盒子构成一个圈，j超过最后一个元素则指向1号元素*/
      if (a[j])
        j++; /*跳过非空的盒子，不进行计数*/
      else {
        if (n == i)
          a[j] = i; /*若数到第i个空盒子，则将牌放入空盒中*/
        j++;
        n++; /*对空盒计数，数组下标指向下一个盒子*/
      }
    } while (n <= i); /*控制空盒计数为i*/
  }
  for (i = 1; i <= 13; i++) /*输出牌的排列顺序*/
    printf("%d ", a[i]);
  printf(" ");
}

[Answer 15:]

#include <stdio.h>
int a[14] = {0};
int main() {
  int i, n, j = 1;
  for (i = 1; i <= 13; i++) {
    n = 0;
    while (n != i) {
      if (a[j] == 0) {
        n++;
        if (n == i)
          a[j] = i;
      }
      j = j == 13 ? 1 : j + 1;
    }
  }
  for (i = 1; i <= 13; i++)
    printf("%d ", a[i]);
  printf("\n");
}

[Answer 16:]

#include <stdio.h>
int main(void) { printf("1 8 2 5 10 3 12 11 9 4 7 6 13"); }

[Answer 17:]

#include <stdio.h>
int main() {
  int a[] = {1, 8, 2, 5, 10, 3, 12, 11, 9, 4, 7, 6, 13};
  int i;
  for (i = 0; i < 13; i++) {
    printf("%d ", a[i]);
  }
  printf("\n");
  return 0;
}

[Answer 18:]

#include <math.h>
#include <stdio.h>
#include <string.h>

int main() {
  int i, n, j = 1;
  int a[14] = {0};

  for (i = 1; i <= 13; i++) {
    n = 0;

    while (n != i) {
      if (a[j] == 0) {
        n++;

        if (n == i)
          a[j] = i;
      }

      j = j == 13 ? 1 : j + 1;
    }
  }
  for (i = 1; i <= 13; i++)
    printf("%d ", a[i]);

  printf("\n");

  return 0;
}

[Answer 19:]

#include <stdio.h>
int a[14] = {0}; //显式地赋0值
int main() {
  int i, n, j = 1;
  for (i = 1; i <= 13; i++) {
    n = 0;
    while (n != i) {   //换成do-while也一样
      if (a[j] == 0) { //如果位置空，n就计数
        n++;
        if (n == i) //到了，赋值
          a[j] = i;
      }
      j = j == 13 ? 1 : j + 1; // j一直计数
    }
  }
  for (i = 1; i <= 13; i++)
    printf("%d ", a[i]);
  printf("\n");
}

[Answer 20:]

#include <stdio.h>
main() { printf("1 8 2 5 10 3 12 11 9 4 7 6 13\n"); }

[Answer 21:]

#include <math.h>
#include <stdio.h>
#include <string.h>

int main() {
  int i, n, j = 1;
  int a[14] = {0};

  for (i = 1; i <= 13; i++) {
    n = 0;

    while (n != i) {
      if (a[j] == 0) {
        n++;

        if (n == i)
          a[j] = i;
      }

      j = j == 13 ? 1 : j + 1;
    }
  }
  for (i = 1; i <= 13; i++)
    printf("%d ", a[i]);

  printf("\n");

  return 0;
}


[21 answers found]