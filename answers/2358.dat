[Answer 1:]

#include <stdio.h>
#include <stdlib.h>

#include <string.h>
int FindString(char *str, char *sub) {
  int flag = 0, sum = 0;
  int i, j;

  for (i = 0; str[i] != '\0'; i++) {
    for (j = 0; sub[j] != '\0'; j++) {
      if (str[i] == sub[j]) {
        flag++;
        i++;
      } else
        break;
    }
    if (flag == strlen(sub)) {
      sum++;
    }
    flag = 0;
  }

  return sum;
}
int main() {
  char a[80], b[80];
  gets(a);
  gets(b);

  printf("%d", FindString(a, b));

  return 0;
}

[Answer 2:]

#include <stdio.h>
#include <stdlib.h>

#include <string.h>
int FindString(char *str, char *sub) {
  int flag = 0;
  int i, j, count = 0, n;

  for (i = 0; i < strlen(str); i++) {
    count = 0;
    for (j = 0, n = i; sub[j] != '\0'; j++, n++) {
      if (sub[j] == str[n])
        count++;
    }
    if (count == strlen(sub))
      flag++;
  }

  return flag;
}
int main() {
  char a[80], b[80];
  gets(a);
  gets(b);

  printf("%d", FindString(a, b));

  return 0;
}

[Answer 3:]

#include <stdio.h>
#include <string.h>
int main() {
  char a[100];
  scanf("%s", a);
  char *c = a;
  char b[10];
  scanf("%s", b);
  char *d = b;
  int n;
  int num = 0;
  n = strlen(d);
  while (strlen(c) > 0) {
    if (strncmp(c, d, n) == 0) {
      num++;
      c += n;
    } else {
      c++;
    }
  }
  printf("%d\n", num);
  return 0;
}

[Answer 4:]

#include <stdio.h>
#include <string.h>
int main() {
  char a[100];
  scanf("%s", a);
  char *c = a;
  char b[10];
  scanf("%s", b);
  char *d = b;
  int n;
  int num = 0;
  n = strlen(d);
  while (strlen(c) > 0) {
    if (strncmp(c, d, n) == 0) {
      num++;
      c += n;
    } else {
      c++;
    }
  }
  printf("%d\n", num);
  return 0;
}

[Answer 5:]

#include <stdio.h>
#define N 50
int FindString(char *str, char *sub);
void main() {
  char a[N], b[N];
  int c;
  gets(a);
  gets(b);
  c = FindString(a, b);
  printf("%d", c);
}
int FindString(char *str, char *sub) {
  int sum = 0, i, j, x = 0, len1, len2, len;
  len1 = strlen(str);
  len2 = strlen(sub);
  len = len1 - len2;
  for (i = 0; i < len1; i++) {
    if (str[i] == sub[0]) {
      x = 0;
      for (j = 0; j < len2; j++) {
        if (str[i + j] = sub[j])
          x++;
      }
      if (x == len2)
        sum++;
    }
  }
  return sum;
}

[Answer 6:]

//用函数编程实现计算字符串中子串出现的次数。
//函数原型：
// int FindString(char *str, char *sub)
//要求：
//在主函数中输入字符串和子串，调用FindString()函数，输出子串出现的次数。

#include <stdio.h>
#include <string.h>

const int len = 100;

int FindString(char *str, char *sub);

int main() {
  char str[len], sub[len];
  gets(str);
  gets(sub);
  printf("%d", FindString(str, sub));

  return 0;
}

int FindString(char *str, char *sub) {
  int i = 0, count = 0;
  while (str[i] != '\0') {
    int j = 0, same = 1;
    while (sub[j] != '\0') {
      if (sub[j] != str[i + j])
        same = 0;
      j++;
    }
    if (same)
      count++;

    i++;
  }

  return count;
}


[6 answers found]