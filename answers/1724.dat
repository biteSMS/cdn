[Answer 1:]

#include <stdio.h>
int jianyan(int a[5][5]) {
  int m, b, i[5], j[5], x[2], sumi = 0, sumj = 0, sumx = 0, p;
  for (m = 0; m < 5; m++) {
    for (b = 0; b < 5; b++) {
      sumi = sumi + a[m][b];
      sumj = sumj + a[b][m];
      j[m] = sumj;
    }
    i[m] = sumi;
  }
  for (m = 0; m < 5; m++)
    sumx = a[m][m] + sumx;
  x[0] = sumx;
  sumx = 0;
  for (m = 0; m < 5; m++)
    sumx = a[m][4 - m] + sumx;
  x[1] = sumx;
  for (m = 0; m < 5; m++)
    return 1;
}
void main() {
  int a[5][5] = {{17, 24, 1, 8, 15},
                 {23, 5, 7, 14, 16},
                 {4, 6, 13, 20, 22},
                 {10, 12, 19, 21, 3},
                 {11, 18, 25, 2, 9}};
  int n, i, j;
  n = jianyan(a);
  if (n = 1) {
    printf("It is a magic square!\n");
    for (i = 0; i < 5; i++) {
      for (j = 0; j < 5; j++) {
        printf("%4d", a[i][j]);
      }
      putchar('\n');
    }
  }
}

[Answer 2:]

#include <stdio.h>
#include <stdlib.h>
#define M 5
int main() {
  printf("It is a magic square!\n");
  int i, j;
  int shuzu[M][M] = {17, 24, 1,  8,  15, 23, 5, 7,  14, 16, 4, 6, 13,
                     20, 22, 10, 12, 19, 21, 3, 11, 18, 25, 2, 9};

  for (i = 0; i < M; i++) {
    for (j = 0; j < M; j++)
      printf("%4d", shuzu[i][j]);
    printf("\n");
  }
  return 0;
}

[Answer 3:]

#include <stdio.h>
#include <string.h>
#define N 5
#define M 20
int main() {
  int a[N][N] = {{17, 24, 1, 8, 15},
                 {23, 5, 7, 14, 16},
                 {4, 6, 13, 20, 22},
                 {10, 12, 19, 21, 3},
                 {11, 18, 25, 2, 9}};
  int i, j;
  printf("It is a magic square!\n");
  for (i = 0; i < N; i++) {
    for (j = 0; j < N; j++)
      printf("%4d", a[i][j]);
    printf("\n");
  }
  return 0;
}

[Answer 4:]

#include <stdio.h>
#include <stdlib.h>
#define N 5

int main() {
  int i, j, flag = 1;
  int Row[N] = {0}, Col[N] = {0}, oblique[2] = {0};
  int number[N][N] = {{17, 24, 1, 8, 15},
                      {23, 5, 7, 14, 16},
                      {4, 6, 13, 20, 22},
                      {10, 12, 19, 21, 3},
                      {11, 18, 25, 2, 9}};

  for (i = 0; i < 5; i++) {
    for (j = 0; j < 5; j++) {
      Row[i] += number[i][j];
      Col[i] += number[j][i];
    }
    oblique[0] += number[i][i];
    oblique[1] += number[i][4 - i];
  }
  for (i = 0; i < 5 && flag; i++) {
    for (j = i + 1; j < 5; j++) {
      if (Row[i] != Row[j]) {
        flag = 0;
        break;
      }
    }
    for (j = 0; j < 5; j++) {
      if (Row[i] != Col[j]) {
        flag = 0;
        break;
      }
    }
    for (j = i + 1; j > 5; j++) {
      if (Col[i] != Col[j]) {
        flag = 0;
        break;
      }
    }
  }
  if (flag) {
    if (Col[0] == oblique[0] && Col[0] == oblique[1]) {
      printf("It is a magic square!\n");
      for (i = 0; i < 5; i++) {
        for (j = 0; j < 5; j++) {
          printf("%4d", number[i][j]);
        }
        printf("\n");
      }
    }
  }
}

[Answer 5:]

#include <stdio.h>
#define N 5
int main(void) {
  int i, j;
  int x[N][N] = {{17, 24, 1, 8, 15},
                 {23, 5, 7, 14, 16},
                 {4, 6, 13, 20, 22},
                 {10, 12, 19, 21, 3},
                 {11, 18, 25, 2, 9}};
  int rowSum[N], colSum[N], diagSum1, diagSum2;
  int flag = 1;
  for (i = 0; i < N; i++) {
    rowSum[i] = 0;
    for (j = 0; j < N; j++) {
      rowSum[i] = rowSum[i] + x[i][j];
    }
  }
  for (j = 0; j < N; j++) {
    colSum[j] = 0;
    for (i = 0; i < N; i++) {
      colSum[j] = colSum[j] + x[i][j];
    }
  }
  diagSum1 = 0;
  for (j = 0; j < N; j++) {
    diagSum1 = diagSum1 + x[j][j];
  }
  diagSum2 = 0;
  for (j = 0; j < N; j++) {
    diagSum2 = diagSum2 + x[j][N - 1 - j];
  }
  if (diagSum1 != diagSum2) {
    flag = 0;
  } else {
    for (i = 0; i < N; i++) {
      if ((rowSum[i] != diagSum1) || (colSum[i] != diagSum1))
        flag = 0;
    }
  }
  if (flag) {
    printf("It is a magic square!\n");
    for (i = 0; i < N; i++) {
      for (j = 0; j < N; j++) {
        printf("%4d", x[i][j]);
      }
      printf("\n");
    }
  } else {
    printf("It is not a magic square!\n");
  }
  return 0;
}

[Answer 6:]

#include <stdio.h>
#define N 5
int main(void) {
  int i, j;
  int x[N][N] = {{17, 24, 1, 8, 15},
                 {23, 5, 7, 14, 16},
                 {4, 6, 13, 20, 22},
                 {10, 12, 19, 21, 3},
                 {11, 18, 25, 2, 9}};
  int rowSum[N], colSum[N], diagSum1, diagSum2;
  int flag = 1;
  for (i = 0; i < N; i++) {
    rowSum[i] = 0;
    for (j = 0; j < N; j++) {
      rowSum[i] = rowSum[i] + x[i][j];
    }
  }
  for (j = 0; j < N; j++) {
    colSum[j] = 0;
    for (i = 0; i < N; i++) {
      colSum[j] = colSum[j] + x[i][j];
    }
  }
  diagSum1 = 0;
  for (j = 0; j < N; j++) {
    diagSum1 = diagSum1 + x[j][j];
  }
  diagSum2 = 0;
  for (j = 0; j < N; j++) {
    diagSum2 = diagSum2 + x[j][N - 1 - j];
  }
  if (diagSum1 != diagSum2) {
    flag = 0;
  } else {
    for (i = 0; i < N; i++) {
      if ((rowSum[i] != diagSum1) || (colSum[i] != diagSum1))
        flag = 0;
    }
  }
  if (flag) {
    printf("It is a magic square!\n");
    for (i = 0; i < N; i++) {
      for (j = 0; j < N; j++) {
        printf("%4d", x[i][j]);
      }
      printf("\n");
    }
  } else {
    printf("It is not a magic square!\n");
  }
  return 0;
}


[6 answers found]