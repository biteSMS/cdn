[Answer 1:]

#include <stdio.h>
#define M 3
#define N 4
void MultiplyMatrix(
    int a[M][N], int b[N][M],
    int c[M][M]) /* 函数功能：计算矩阵相乘之积，结果存于二维数组c中 */
{
  int i, j, k;
  for (i = 0; i < M; i++) {
    for (j = 0; j < M; j++) {
      c[i][j] = 0;
    }
  }
  for (k = 0; k < M; k++) {
    for (i = 0; i < M; i++) {
      for (j = 0; j < N; j++) {
        c[k][i] += (a[i][j] * b[j][i]);
      }
    }
  }
}
void InputMatrixA(int a[M][N]) /* 函数功能：输入矩阵a中的元素 */
{
  int i, j;
  printf("Input %d*%d matrix a:\n", M, N);
  for (i = 0; i < M; i++) {
    for (j = 0; j < N; j++) {
      printf("a[%d,%d]:", i, j);
      scanf("%d", &a[i][j]);
    }
  }
}
void InputMatrixB(int b[N][M]) /* 函数功能：输入矩阵b中的元素 */
{
  int i, j;
  printf("Input %d*%d matrix b:\n", N, M);
  for (i = 0; i < N; i++) {
    for (j = 0; j < M; j++) {
      printf("b[%d,%d]:", i, j);
      scanf("%d", &b[i][j]);
    }
  }
}
void OutputMatrix(int a[M][M]) /* 函数功能：输出矩阵a中的元素 */
{
  int i, j;
  printf("Results:\n");
  for (i = 0; i < M; i++) {
    for (j = 0; j < M; j++) {
      printf("%6d", a[i][j]);
    }
    printf("\n");
  }
}

int main() {
  int a[M][N], b[N][M], c[M][M];
  InputMatrixA(a);
  InputMatrixB(b);
  MultiplyMatrix(a, b, c);
  OutputMatrix(c);
  return 0;
}

[Answer 2:]

#include <stdio.h>
#define M 3
#define N 4
void InputMatrixA(int a[M][N]);
void InputMatrixB(int b[N][M]);
void MultiplyMatrix(int a[M][N], int b[N][M], int c[M][M]);
void OutputMatrix(int c[M][M]);
int result(int a[M][N], int b[N][M], int i, int j);
int main() {
  int a[M][N], b[N][M], c[M][M];
  InputMatrixA(a);
  InputMatrixB(b);
  MultiplyMatrix(a, b, c);
  OutputMatrix(c);
  return 0;
}
void InputMatrixA(int a[M][N]) {
  int i, j;
  printf("Input 3*4 matrix a:\n");
  for (i = 0; i < M; i++) {
    for (j = 0; j < N; j++) {
      printf("a[%d,%d]:", i, j);
      scanf("%d", &a[i][j]);
    }
  }
}
void InputMatrixB(int b[N][M]) {
  int i = 0, j = 0;
  printf("Input 4*3 matrix b:\n");
  for (i = 0; i < N; i++) {
    for (j = 0; j < M; j++) {
      printf("b[%d,%d]:", i, j);
      scanf("%d", &b[i][j]);
    }
  }
}
void MultiplyMatrix(int a[M][N], int b[N][M], int c[M][M]) {
  int i = 0, j = 0;
  for (i = 0; i < M; i++) {
    for (j = 0; j < M; j++) {
      c[i][j] = result(a, b, i, j);
    }
  }
}
void OutputMatrix(int c[M][M]) {
  int i = 0, j = 0;
  printf("Results:\n");
  for (i = 0; i < M; i++) {
    for (j = 0; j < M; j++) {
      printf("%6d", c[i][j]);
    }
    printf("\n");
  }
}
int result(int a[M][N], int b[N][M], int i, int j) {
  int k = 0;
  int res = 0;
  for (; k < 4; k++) {
    res += a[i][k] * b[k][j];
  }
  return res;
}

[Answer 3:]

#include <stdio.h>
#define M 3
#define N 4
void InputMatrixA(int a[M][N]) {
  int i, j;
  for (i = 0; i < M; i++)
    for (j = 0; j < N; j++) {
      printf("a[%d,%d]:", i, j);
      scanf("%d", &a[i][j]);
    }
}
void InputMatrixB(int b[N][M]) {
  int i, j;
  for (i = 0; i < N; i++) {
    for (j = 0; j < M; j++) {
      printf("b[%d,%d]:", i, j);
      scanf("%d", &b[i][j]);
    }
  }
}

void MultiplyMatrix(int a[M][N], int b[N][M], int c[M][M]) {
  int i, j, s[M][N], k, sum = 0;

  for (i = 0; i < M; i++) {
    for (j = 0; j < N; j++) {
      s[i][j] = b[j][i]; //两个矩阵化成相同的格式
    }
  }

  for (k = 0; k < M; k++) {
    for (i = 0; i < M; i++) {
      for (j = 0, sum = 0; j < N; j++) {
        sum += a[i][j] * s[i][j];
        c[k][i] = sum;
      }
    }
  }
}
void OutputMatrix(int c[M][M]) {
  int i, j;
  for (i = 0; i < M; i++) {
    for (j = 0; j < M; j++) {
      printf("%6d", c[i][j]);
    }
    printf("\n");
  }
}
int main() {
  int a[M][N], b[N][M], c[M][M];
  printf("Input 3*4 matrix a:\n");
  InputMatrixA(a);
  printf("Input 4*3 matrix b:\n");
  InputMatrixB(b);
  MultiplyMatrix(a, b, c);
  printf("Results:\n");
  OutputMatrix(c);
  return 0;
}


[3 answers found]