[Answer 1:]

#include <stdio.h>
#include <string.h>
int k = 0;
int fun(int x) {
  k++;
  int i, j, b[4], m, n, temp, MAX, MIN;
  if (x == 6174)
    return 0;
  else {
    b[0] = x % 10;
    b[1] = x / 10 % 10;
    b[2] = x / 100 % 10;
    b[3] = x / 1000;
    for (i = 0; i < 3; i++) {
      m = i;
      for (j = i; j < 4; j++) {
        if (b[j] > b[m])
          m = j;
      }
      if (m != i) {
        temp = b[m];
        b[m] = b[i];
        b[i] = temp;
      }
    }
    MAX = b[0] * 1000 + b[1] * 100 + b[2] * 10 + b[3];
    for (i = 0; i < 3; i++) {
      m = i;
      for (j = i; j < 4; j++) {
        if (b[j] < b[m])
          m = j;
      }
      if (m != i) {
        temp = b[m];
        b[m] = b[i];
        b[i] = temp;
      }
    }
    MIN = b[0] * 1000 + b[1] * 100 + b[2] * 10 + b[3];
    n = MAX - MIN;
    printf(" [%d]:%d-%d=%d\n", k, MAX, MIN, n);
  }
  return fun(n);
}
int main() {
  int x;
  printf("Enter number:");
  scanf("%d", &x);
  fun(x);
  return 0;
}

[Answer 2:]

#include <stdio.h>
int k = 0;
int fun(int x) {
  int i, j, temp, m, b[4], MAX, MIN, n;
  if (x == 6174)
    return 0;
  else {
    k++;
    b[0] = x % 10;
    b[1] = x / 10 % 10;
    b[2] = x / 100 % 10;
    b[3] = x / 1000;
    for (i = 0; i < 3; i++) {
      m = i;
      for (j = i; j < 4; j++) {
        if (b[j] > b[m])
          m = j;
      }
      if (m != i) {
        temp = b[i];
        b[i] = b[m];
        b[m] = temp;
      }
    }
    MAX = b[0] * 1000 + b[1] * 100 + b[2] * 10 + b[3];
    MIN = b[3] * 1000 + b[2] * 100 + b[1] * 10 + b[0];
    n = MAX - MIN;
    printf(" [%d]:%d-%d=%d\n", k, MAX, MIN, n);
    return fun(n);
  }
}
int main() {
  int x;
  printf("Enter number:");
  scanf("%d", &x);
  fun(x);
  return 0;
}

[Answer 3:]

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
  int a, b[4], c, e, t, j, k, l = 0;
  printf("Enter number:");
  scanf("%d", &a);

  while (a != 6174) {
    b[0] = a / 1000;
    b[1] = (a - b[0] * 1000) / 100;
    b[2] = (a - b[0] * 1000 - b[1] * 100) / 10;
    b[3] = a % 10;
    for (c = 0; c < 3; c++) {
      for (e = c; e < 4; e++) {
        if (b[c] < b[e]) {
          t = b[c];
          b[c] = b[e];
          b[e] = t;
        }
      }
    }
    j = b[0] * 1000 + b[1] * 100 + b[2] * 10 + b[3];
    k = b[3] * 1000 + b[2] * 100 + b[1] * 10 + b[0];
    a = j - k;
    l++;
    printf(" [%d]:%d-%d=%d\n", l, j, k, a);
  }
  system("pause");
  return 0;
}

[Answer 4:]

#include <stdio.h>
#include <stdlib.h>
int max_cmp(const void *a, const void *b) {
  return (*((const char *)b)) - (*((const char *)a));
}
int min_cmp(const void *a, const void *b) {
  return (*((const char *)a)) - (*((const char *)b));
}
int get_max(int n) {
  char buffer[BUFSIZ] = "";
  sprintf(buffer, "%04d", n);
  qsort(buffer, 4, sizeof(char), max_cmp);
  return atoi(buffer);
}
int get_min(int n) {
  char buffer[BUFSIZ] = "";
  sprintf(buffer, "%04d", n);
  qsort(buffer, 4, sizeof(char), min_cmp);
  return atoi(buffer);
}
int main() {
  int n, i = 0;
  printf("Enter number:");
  scanf("%d", &n);
  while (n != 6174) {
    i++;
    int a = get_max(n);
    int b = get_min(n);
    n = a - b;
    printf(" [%d]:%d-%d=%d\n", i, a, b, n);
  }
  return 0;
}

[Answer 5:]

#include <stdio.h>
void vr6174(int);
void parse_sort(int num, int *each);
void max_min(int *each, int *max, int *min);
void parse_sort(int num, int *each);
int count = 0;
int main() {
  int n;
  printf("Enter number:");
  scanf("%d", &n); /*输入任意正整数*/
  vr6174(n);       /*调用函数进行验证*/
}

void vr6174(int num) {
  int each[4], max, min;
  if (num != 6174 && num) /*若不等于74且不等于0则进行卡布列克运算*/
  {
    parse_sort(num, each);     /*将整数分解，数字存入each数组中*/
    max_min(each, &max, &min); /*求数字组成的最大值和最小值*/
    num = max - min;           /*求最大值和最小值的差*/
    printf(" [%d]:%d-%d=%d\n", ++count, max, min, num); /*输出该步计算过程*/
    vr6174(num); /*递归调用自身继续进行卡布列克运算*/
  }
}
void parse_sort(int num, int *each) {
  int i, *j, *k, temp;
  for (i = 0; i <= 4; i++) /*将NUM分解为数字*/
  {
    j = each + 3 - i;
    *j = num % 10;
    num /= 10;
  }
  for (i = 0; i < 3; i++) /*对各保数字从小到大进行排序*/
    for (j = each, k = each + 1; j < each + 3 - i; j++, k++)
      if (*j > *k) {
        temp = *j;
        *j = *k;
        *k = temp;
      }
  return;
}
void max_min(int *each, int *max,
             int *min) /*将分解的数字还原为最大整数和最小整数*/
{
  int *i;
  *min = 0;
  for (i = each; i < each + 4; i++) /*还原为最小的整数*/
    *min = *min * 10 + *i;
  *max = 0;
  for (i = each + 3; i >= each; i--) /*还原为最大的整数*/
    *max = *max * 10 + *i;
  return;
}

[Answer 6:]

#include <stdio.h>
void vr6174(int);
void parse_sort(int num, int *each);
void max_min(int *each, int *max, int *min);
void parse_sort(int num, int *each);
int count = 0;
int main() {
  int n;
  printf("Enter number:");
  scanf("%d", &n); /*输入任意正整数*/
  vr6174(n);       /*调用函数进行验证*/
}
void vr6174(int num) {
  int each[4], max, min;
  if (num != 6174 && num) /*若不等于74且不等于0则进行卡布列克运算*/
  {
    parse_sort(num, each);     /*将整数分解，数字存入each数组中*/
    max_min(each, &max, &min); /*求数字组成的最大值和最小值*/
    num = max - min;           /*求最大值和最小值的差*/
    printf(" [%d]:%d-%d=%d\n", ++count, max, min, num); /*输出该步计算过程*/
    vr6174(num); /*递归调用自身继续进行卡布列克运算*/
  }
}
void parse_sort(int num, int *each) {
  int i, *j, *k, temp;
  for (i = 0; i <= 4; i++) /*将NUM分解为数字*/
  {
    j = each + 3 - i;
    *j = num % 10;
    num /= 10;
  }
  for (i = 0; i < 3; i++) /*对各保数字从小到大进行排序*/
    for (j = each, k = each + 1; j < each + 3 - i; j++, k++)
      if (*j > *k) {
        temp = *j;
        *j = *k;
        *k = temp;
      }
  return;
}
void max_min(int *each, int *max,
             int *min) /*将分解的数字还原为最大整数和最小整数*/
{
  int *i;
  *min = 0;
  for (i = each; i < each + 4; i++) /*还原为最小的整数*/
  {
    *min = *min * 10 + *i;
    *max = 0;
  }
  for (i = each + 3; i >= each; i--) /*还原为最大的整数*/
  {
    *max = *max * 10 + *i;
  }
  return;
}

[Answer 7:]

#include <stdio.h>
void main() {
  int a, b, c, d, e, f, h, j, k;
  printf("Enter number: [1]:4321-1234=3087\n");
  printf(" [2]:8730-378=8352\n");
  printf(" [3]:8532-2358=6174\n");
}


[7 answers found]