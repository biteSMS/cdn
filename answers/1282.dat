[Answer 1:]

#include <stdio.h>
#define M 3
#define N 4
int FindMax(int (*p)[N], int m, int n, int *pRow, int *pCol);
main() {
  int score[M][N], i, j, maxScore, row = 0, col = 0;
  for (i = 0; i < M; i++) {
    for (j = 0; j < N; j++) {
      scanf("%d", &score[i][j]);
    }
  }
  // printf("输入成功\n");
  maxScore = FindMax(score, M, N, &row, &col);
  printf("%d %d %d\n", maxScore, row + 1, col + 1);
}

int FindMax(int (*p)[N], int m, int n, int *pRow, int *pCol) {
  int i, j, max;
  max = **(p);
  *pRow = 0;
  *pCol = 0;
  for (i = 0; i < m; i++) {
    for (j = 0; j < n; j++) {
      if (*(*(p + i) + j) > max) //[i][j]>max
      {
        max = *(*(p + i) + j);
        *pRow = i;
        *pCol = j;
        // printf("max:%d\n",max);
      }
    }
  }
  return max;
}

[Answer 2:]

#include <stdio.h>
#define M 3
#define N 4
int FindMax(int (*p)[N], int m, int n, int *pRow, int *pCol);
int main() {
  int score[M][N], i, j, maxScore, row, col;
  for (i = 0; i < M; i++) {
    for (j = 0; j < N; j++) {
      scanf("%d", &score[i][j]);
    }
  }
  maxScore = FindMax(score, M, N, &row, &col);
  printf("%d %d %d\n", maxScore, row + 1, col + 1);
  return 0;
}
int FindMax(int (*p)[N], int m, int n, int *pRow, int *pCol) {
  int i, j, max;
  max = (*p)[0];
  *pRow = 0;
  *pCol = 0;
  for (i = 0; i < m; i++) {
    for (j = 0; j < n; j++) {
      if (*(*(p + i) + j) > max) {
        max = *(*(p + i) + j);
        *pRow = i;
        *pCol = j;
      }
    }
  }
  return max;
}

[Answer 3:]

/*程序改错。在一个3x4矩阵中找出最大数及最大数所在元素的下标。 */
#include <stdio.h>
#define M 3
#define N 4
int FindMax(int (*p)[N], int m, int n, int *pRow, int *pCol);
main() {
  int score[M][N], i, j, maxScore, row, col;
  for (i = 0; i < M; i++) {
    for (j = 0; j < N; j++) {
      scanf("%d", &score[i][j]);
    }
  }
  maxScore = FindMax(score, M, N, &row, &col);
  printf("%d %d %d\n", maxScore, row + 1, col + 1);
}
int FindMax(int (*p)[N], int m, int n, int *pRow, int *pCol) {
  int i, j, max;
  max = p[0][0];
  *pRow = 0;
  *pRow = 0;
  for (i = 0; i < m; i++) {
    for (j = 0; j < n; j++) {
      if (p[i][j] > max) {
        max = p[i][j];
        *pRow = i;
        *pCol = j;
      }
    }
  }
  return max;
}

[Answer 4:]

#include <stdio.h>
#define N 3
#define M 4
void main() {
  int a[N][M], i, j, maxi, maxj;
  for (i = 0; i < N; i++)
    for (j = 0; j < M; j++)
      scanf("%d", &a[i][j]);
  maxi = maxj = 0;
  for (i = 0; i < N; i++)
    for (j = 0; j < M; j++)
      if (a[maxi][maxj] < a[i][j]) {
        maxi = i;
        maxj = j;
      }
  printf("%d %d %d\n", a[maxi][maxj], maxi + 1, maxj + 1);
}

[Answer 5:]

#include <stdio.h>
#define N 3
#define M 4
void main() {
  int a[N][M], i, j, maxi, maxj;
  for (i = 0; i < N; i++)
    for (j = 0; j < M; j++)
      scanf("%d", &a[i][j]);
  maxi = maxj = 0;
  for (i = 0; i < N; i++)
    for (j = 0; j < M; j++)
      if (a[maxi][maxj] < a[i][j]) {
        maxi = i;
        maxj = j;
      }
  printf("%d %d %d\n", a[maxi][maxj], maxi + 1, maxj + 1);
}

[Answer 6:]

#include <stdio.h>
#define M 3
#define N 4
int FindMax(int (*p)[N], int m, int n, int *pRow, int *pCol);
int main() {
  int score[M][N], i, j, maxScore, row, col;
  for (i = 0; i < M; i++) {
    for (j = 0; j < N; j++) {
      scanf("%d", &score[i][j]);
    }
  }
  maxScore = FindMax(score, M, N, &row, &col);
  printf("%d %d %d\n", maxScore, row + 1, col + 1);

  return 0;
}

int FindMax(int (*p)[N], int m, int n, int *pRow, int *pCol) {
  int i, j, max;
  max = p[0][0];
  *pRow = 0;
  *pCol = 0;
  for (i = 0; i < m; i++) {
    for (j = 0; j < n; j++) {
      if (*(*(p + i) + j) > max) {
        max = *(*(p + i) + j);
        *pRow = i;
        *pCol = j;
      }
    }
  }
  return max;
}

[Answer 7:]

#include <stdio.h>
#define M 3
#define N 4
int FindMax(int (*p)[N], int m, int n, int *pRow, int *pCol);
int main() {
  int score[M][N], i, j, maxScore, row, col;
  for (i = 0; i < M; i++) {
    for (j = 0; j < N; j++) {
      scanf("%d", &score[i][j]);
    }
  }
  maxScore = FindMax(score, M, N, &row, &col);
  printf("%d %d %d\n", maxScore, row + 1, col + 1);

  return 0;
}

int FindMax(int (*p)[N], int m, int n, int *pRow, int *pCol) {
  int i, j, max;
  max = p[0][0];
  *pRow = 0;
  *pCol = 0;
  for (i = 0; i < m; i++) {
    for (j = 0; j < n; j++) {
      if (*(*(p + i) + j) > max) {
        max = *(*(p + i) + j);
        *pRow = i;
        *pCol = j;
      }
    }
  }
  return max;
}

[Answer 8:]

#include <stdio.h>
#define M 3
#define N 4
int FindMax(int (*p)[N], int m, int n, int *pRow, int *pCol);
main() {
  int score[M][N], i, j, maxScore, row, col;
  for (i = 0; i < M; i++) {
    for (j = 0; j < N; j++) {
      scanf("%d", &score[i][j]);
    }
  }
  maxScore = FindMax(score, M, N, &row, &col);
  printf("%d %d %d\n", maxScore, row + 1, col + 1);
}

int FindMax(int (*p)[N], int m, int n, int *pRow, int *pCol) {
  int i, j, max;
  max = p[0][0];
  *pRow = 0;
  *pCol = 0;
  for (i = 0; i < m; i++) {
    for (j = 0; j < n; j++) {
      if (*(*(p + i) + j) > max) {
        max = *(*(p + i) + j);
        *pRow = i;
        *pCol = j;
      }
    }
  }
  return max;
}

[Answer 9:]

#include <stdio.h>
#define M 3
#define N 4
int FindMax(int (*p)[N], int m, int n, int *pRow, int *pCol);
int main() {
  int score[M][N], i, j, maxScore, row, col;
  for (i = 0; i < M; i++) {
    for (j = 0; j < N; j++) {
      scanf("%d", &score[i][j]);
    }
  }
  maxScore = FindMax(score, M, N, &row, &col);
  printf("%d %d %d\n", maxScore, row + 1, col + 1);
  return 0;
}
int FindMax(int (*p)[N], int m, int n, int *pRow, int *pCol) {
  int i, j, max;
  max = 0;
  *pRow = 0;
  *pCol = 0;
  for (i = 0; i < m; i++) {
    for (j = 0; j < n; j++) {
      if (*(*(p + i) + j) > max) {
        max = *(*(p + i) + j);
        *pRow = i;
        *pCol = j;
      }
    }
  }
  return max;
}

[Answer 10:]

#include <stdio.h>
#define M 3
#define N 4
int FindMax(int (*p)[N], int m, int n, int *pRow, int *pCol);
int main() {
  int score[M][N], i, j, maxScore, row, col;
  for (i = 0; i < M; i++) {
    for (j = 0; j < N; j++) {
      scanf("%d", &score[i][j]);
    }
  }
  maxScore = FindMax(score, M, N, &row, &col);
  printf("%d %d %d\n", maxScore, row + 1, col + 1);
  return 0;
}

int FindMax(int (*p)[N], int m, int n, int *pRow, int *pCol) {
  int i, j, max;
  max = p[0][0];
  *pRow = 0;
  *pCol = 0;
  for (i = 0; i < m; i++) {
    for (j = 0; j < n; j++) {
      if (*(*(p + i) + j) > max) {
        max = *(*(p + i) + j);
        *pRow = i;
        *pCol = j;
      }
    }
  }

  return max;
}

[Answer 11:]

#include <stdio.h>
#define M 3
#define N 4
int FindMax(int (*p)[N], int m, int n, int *pRow, int *pCol);
int main() {
  int score[M][N], i, j, maxScore, row, col;
  for (i = 0; i < M; i++) {
    for (j = 0; j < N; j++) {
      scanf("%d", &score[i][j]);
    }
  }
  maxScore = FindMax(score, M, N, &row, &col);
  printf("%d %d %d\n", maxScore, row + 1, col + 1);
  return 0;
}

int FindMax(int (*p)[N], int m, int n, int *pRow, int *pCol) {
  int i, j, max;
  max = p[0][0];
  *pRow = 0;
  *pCol = 0;
  for (i = 0; i < m; i++) {
    for (j = 0; j < n; j++) {
      if (*(*(p + i) + j) > max) {
        max = *(*(p + i) + j);
        *pRow = i;
        *pCol = j;
      }
    }
  }

  return max;
}


[11 answers found]