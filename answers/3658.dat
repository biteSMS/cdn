[Answer 1:]

#include <stdio.h>
#include <stdlib.h>
int ReadScore(int score[]) {
  int i, j = 0;
  for (i = 0; i < 40; i++) {
    scanf("%d", &score[i]);
    if (score[0] == -1) {
      printf("there are no valid scores");
      break;
    }
    if (score[i] == -1)
      return j;
    j++;
  }
  return j;
}
int fun(int score[], int m, int below_score[], int below_index[]) {
  int i, k = 0;
  int sum = 0;
  double aver = 0;
  for (i = 0; i < m; i++) {
    sum += score[i];
  }
  aver = (double)sum / m;
  for (i = 0; i < m; i++) {
    if (score[i] < aver) {
      below_score[k] = score[i];
      below_index[k] = i;
      k++;
    }
  }
  return k;
}
int main() {
  int score[40];
  int i, j, k;
  int below_score[40], below_index[40];
  j = ReadScore(score);
  printf("the number of the class:%d\n", j);
  i = fun(score, j, below_score, below_index);
  printf("the number under the average score: %d\n", i);
  for (k = 0; k < i; k++) {
    printf("the %dth score is: %d\n", below_index[k] + 1, below_score[k]);
  }
  return 0;
}

[Answer 2:]

#include <stdio.h>
#include <stdlib.h>
#define N 40
int fun(int score[], int m, int below_score[], int below_index[]);
int ReadScore(int score[]);
int main() {
  int score[N], m, n, j, below_score[N], below_index[N];
  m = ReadScore(score);
  if (-1 == m)
    exit(0);
  else {
    n = fun(score, m, below_score, below_index);

    printf("the number of the class:%d\n", m);
    printf("the number under the average score: %d\n", n);

    for (j = 0; j < n; j++) {
      printf("the %dth score is: %d\n", below_index[j] + 1, below_score[j]);
    }
  }
  return 0;
}
int ReadScore(int score[]) {
  int i;
  for (i = 0;; i++) {
    scanf("%d", &score[i]);
    if (score[i] < 0)
      break;
    else if (i == 0 && score[i] < 0) {
      printf("there are no valid scores");
      return -1;
    }
  }
  return i;
}
int fun(int score[], int m, int below_score[], int below_index[]) {
  int sum = 0, aver, i, n = 0;
  for (i = 0; i < m; i++) {
    sum += score[i];
  }
  aver = sum / m;
  for (i = 0; i < m; i++) {
    if (score[i] < aver) {
      below_score[n] = score[i];
      below_index[n] = i;
      n++;
    }
  }
  return n;
}

[Answer 3:]

#include <stdio.h>
#define N 40
int fun(int score[], int m, int below_score[], int below_index[]);
int ReadScore(int score[]);
int main() {
  int score[N], below_score[N], below_index[N];
  int i, n, m;
  m = ReadScore(score);
  printf("the number of the class:%d", m);
  n = fun(score, m, below_score, below_index);
  printf("\nthe number under the average score: %d", n);
  for (i = 0; i < n; i++) {
    printf("\nthe %dth score is: %d", below_index[i], below_score[i]);
  }
  return 0;
}
int ReadScore(int score[]) {
  int i = -1;
  do {
    i++;
    scanf("%d", &score[i]);
  } while (score[i] >= 0);
  return i;
}
int fun(int score[], int m, int below_score[], int below_index[]) {
  int i, j = 0, k = 0, aver, sum = 0;
  for (i = 0; i < m; i++) {
    sum = sum + score[i];
  }
  aver = (int)sum / m;
  for (i = 0; i < m; i++) {
    if (score[i] < aver) {
      below_score[j++] = score[i];
      below_index[k++] = i + 1;
    }
  }
  return j;
}

[Answer 4:]

#include <stdio.h>
#define N 40
#define M 10
int fun(int score[], int m, int below_score[], int below_index[]) {
  int i, ave, sum = 0, j = 0, k = 0;
  for (i = 0; i < m; i++) {
    sum += score[i];
  }
  ave = sum / m;
  // printf("%d-------", ave);
  for (i = 0; i < m; i++) {
    if (score[i] < ave) {
      below_score[j++] = score[i];
      below_index[k++] = i + 1;
    }
  }
  return j;
}
int ReadScore(int score[]) {
  int i = 0, count = 0, s = 0, k = 0;
  do {
    scanf("%d", &s);
    score[i++] = s;
    // printf("%d",score[i++]);
  } while (s >= 0 && i <= N);
  return i - 1;
}
int main() {
  int score[M], below_score[N], below_index[N], m, i, n;
  m = ReadScore(score);
  n = fun(score, m, below_score, below_index);
  printf("the number of the class:%d\n", m);
  printf("the number under the average score: %d\n", n);
  for (i = 0; i < n; i++)
    printf("the %dth score is: %d\n", below_index[i], below_score[i]);
  return 0;
}


[4 answers found]