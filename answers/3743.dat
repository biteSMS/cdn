[Answer 1:]

#include <stdio.h>
#include <string.h>
int longestValidParentheses(char *s);
main() {
  int m;
  char c[20];
  printf("Please input the array\n");
  gets(c);
  m = longestValidParentheses(c);
  printf("The longest length is %d", m);
}
int longestValidParentheses(char *s) {
  int a = 0, b = 0, i;
  for (i = 0; i < strlen(s); i++) {
    if (s[i] == '(')
      a++;
    else
      b++;
  }
  if (a > b)
    return 2 * b;
  else
    return 2 * a;
}

[Answer 2:]

#include <stdio.h>
int longestValidParentheses(char *s) {
  int stack[100000];
  int sum = 0, top = 0, max = 0, i, j;
  stack[top++] = 0;
  while (*s != '\0') {
    if (*s == '(') {
      stack[top++] = ++sum;
    } else {
      stack[top++] = --sum;
    }
    if (sum < 0) {
      top = 1;
      sum = 0;
    }
    if (*s == ')') {
      for (i = top - 2; i >= 0; i--) {
        if (stack[i] < stack[top - 1]) {
          int newLen = top - 2 - i;
          max = newLen > max ? newLen : max;
          break;
        }
      }
      if (i == -1 && stack[0] == stack[top - 1]) {
        int newLen = top - 1;
        max = newLen > max ? newLen : max;
      }
    }
    s++;
  }
  return max;
}
int main(int argc, char **argv) {

  char array[128];
  printf("Please input the array\n");
  scanf("%s", array);
  int result = longestValidParentheses(array);
  printf("The longest length is %d\n", result);

  return 0;
}


[2 answers found]