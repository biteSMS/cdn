[Answer 1:]

#include <math.h>
#include <stdio.h>
#define MAX 100
double D(double arr[][MAX], int n);
void Display(double arr[][MAX], int n);
void main() {
  double arr[MAX][MAX];
  double bak[MAX][MAX];
  double value;
  int n;
  int i, j, k, c;
  printf("Please enter matrix size n(1<=n<20):");
  scanf("%d", &n);
  printf("Please input matrix line by line:\n");
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      scanf("%lf", &arr[i][j]);
    }
  }
  printf("matrix a:\n");

  Display(arr, n);
  printf("\n");

  for (i = 0; i < n; i++) {
    for (j = 1; j < n; j++) {
      for (c = 0, k = 0; k < n; k++) {
        if (k == i) {
          continue;
        }
        bak[j - 1][c++] = arr[j][k];
      }
    }
    value = D(bak, n - 1);
    printf("Submatrix:\n");
    Display(bak, n - 1);
    printf("DValue of the Submatrix is %6.1f\n", D(bak, n - 1));
  }
  value = D(arr, n);
  printf("result = %f\n", value);
}
double D(double arr[][MAX], int n) {
  double bak[MAX][MAX];
  int i, j, k, c, d;
  double sum = 0;
  if (n == 1) {
    return arr[0][0];
  }
  for (i = 0; i < n; i++) {
    for (j = 1; j < n; j++) {
      for (c = 0, k = 0; k < n; k++) {
        if (k == i) {
          continue;
        }
        bak[j - 1][c++] = arr[j][k];
      }
    }

    sum += (i % 2 == 0 ? 1 : -1) * arr[0][i] * D(bak, n - 1);
  }
  return sum;
}
void Display(double arr[][MAX], int n) {
  int i, j;
  printf("");
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      printf("%6.1f\t", arr[i][j]);
    }
    printf("\n");
  }
}

[Answer 2:]

#include <math.h>
#include <stdio.h>

#define CONST 1e-6
#define SIZE 20

void InputMatrix(double a[][SIZE], int n);
double DeterminantValue(double a[][SIZE], int n);
void SubMatrix(double a[][SIZE], double b[][SIZE], int n, int row, int col);
void PrintMatrix(double a[][SIZE], int n);
int main(void) {
  double a[SIZE][SIZE];
  int n;
  double result;
  printf("Please enter matrix size n(1<=n<%d):", SIZE);
  scanf("%d", &n);
  printf("Please input matrix line by line:\n");
  InputMatrix(a, n);
  printf("matrix a:\n");
  PrintMatrix(a, n);
  printf("\n");
  result = DeterminantValue(a, n);
  printf("result = %f\n", result);
  return 0;
}
//  函数功能： 输入一个n×n矩阵的元素
void InputMatrix(double a[][SIZE], int n) {
  int i, j;
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      scanf("%lf", &a[i][j]);
    }
  }
}
//  函数功能： 计算n×n矩阵的行列式的值
double DeterminantValue(double a[][SIZE], int n) {
  int i = 0, j = 0;
  double temp, result, b[SIZE][SIZE];
  if (n == 1) {
    result = a[0][0];
  } else if (n == 2) {
    result = a[0][0] * a[1][1] - a[0][1] * a[1][0];
  } else {
    result = 0.0;
    for (j = 0; j < n; j++) {
      SubMatrix(a, b, n, i, j);
      printf("Submatrix:\n");
      PrintMatrix(b, n - 1);
      temp = DeterminantValue(b, n - 1);
      result += pow(-1, i + j) * a[0][j] * temp;
      printf("DValue of the Submatrix is %6.1f\n", temp);
    }
  }
  return result;
}
//  函数功能： 计算n×n矩阵a中第row行col列元素的(n-1)×(n-1)子矩阵b
void SubMatrix(double a[][SIZE], double b[][SIZE], int n, int row, int col) {
  int i, j, ii = 0, jj = 0;
  for (i = 0; i < n; i++) {
    jj = 0;
    for (j = 0; j < n; j++) {
      if (i != row && j != col) {
        b[ii][jj] = a[i][j];
        jj++;
      }
    }
    if (i != row && j != col) {
      ii++;
    }
  }
}
//  函数功能： 输出一个n×n矩阵的元素
void PrintMatrix(double a[][SIZE], int n) {
  int i, j;
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      printf("%6.1f\t", a[i][j]);
    }
    printf("\n");
  }
}

[Answer 3:]

#include <math.h>
#include <stdio.h>

#define CONST 1e-6
#define SIZE 20

void InputMatrix(double a[][SIZE], int n);
double DeterminantValue(double a[][SIZE], int n);
void SubMatrix(double a[][SIZE], double b[][SIZE], int n, int row, int col);
void PrintMatrix(double a[][SIZE], int n);
int main(void) {
  double a[SIZE][SIZE];
  int n;
  double result;
  printf("Please enter matrix size n(1<=n<%d):", SIZE);
  scanf("%d", &n);
  printf("Please input matrix line by line:\n");
  InputMatrix(a, n);
  printf("matrix a:\n");
  PrintMatrix(a, n);
  printf("\n");
  result = DeterminantValue(a, n);
  printf("result = %f\n", result);
  return 0;
}
//  函数功能： 输入一个n×n矩阵的元素
void InputMatrix(double a[][SIZE], int n) {
  int i, j;
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      scanf("%lf", &a[i][j]);
    }
  }
}
//  函数功能： 计算n×n矩阵的行列式的值
double DeterminantValue(double a[][SIZE], int n) {
  int i = 0, j = 0;
  double temp, result, b[SIZE][SIZE];
  if (n == 1) {
    result = a[0][0];
  } else if (n == 2) {
    result = a[0][0] * a[1][1] - a[0][1] * a[1][0];
  } else {
    result = 0.0;
    for (j = 0; j < n; j++) {
      SubMatrix(a, b, n, i, j);
      printf("Submatrix:\n");
      PrintMatrix(b, n - 1);
      temp = DeterminantValue(b, n - 1);
      result += pow(-1, i + j) * a[0][j] * temp;
      printf("DValue of the Submatrix is %6.1f\n", temp);
    }
  }
  return result;
}
//  函数功能： 计算n×n矩阵a中第row行col列元素的(n-1)×(n-1)子矩阵b
void SubMatrix(double a[][SIZE], double b[][SIZE], int n, int row, int col) {
  int i, j, ii = 0, jj = 0;
  for (i = 0; i < n; i++) {
    jj = 0;
    for (j = 0; j < n; j++) {
      if (i != row && j != col) {
        b[ii][jj] = a[i][j];
        jj++;
      }
    }
    if (i != row && j != col) {
      ii++;
    }
  }
}
//  函数功能： 输出一个n×n矩阵的元素
void PrintMatrix(double a[][SIZE], int n) {
  int i, j;
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      printf("%6.1f\t", a[i][j]);
    }
    printf("\n");
  }
}

[Answer 4:]

#include <math.h>
#include <stdio.h>

#define CONST 1e-6
#define SIZE 20

void InputMatrix(double a[][SIZE], int n);
double DeterminantValue(double a[][SIZE], int n);
void SubMatrix(double a[][SIZE], double b[][SIZE], int n, int row, int col);
void PrintMatrix(double a[][SIZE], int n);
int main(void) {
  double a[SIZE][SIZE];
  int n;
  double result;
  printf("Please enter matrix size n(1<=n<%d):", SIZE);
  scanf("%d", &n);
  printf("Please input matrix line by line:\n");
  InputMatrix(a, n);
  printf("matrix a:\n");
  PrintMatrix(a, n);
  printf("\n");
  result = DeterminantValue(a, n);
  printf("result = %f\n", result);
  return 0;
}
//  函数功能： 输入一个n×n矩阵的元素
void InputMatrix(double a[][SIZE], int n) {
  int i, j;
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      scanf("%lf", &a[i][j]);
    }
  }
}
//  函数功能： 计算n×n矩阵的行列式的值
double DeterminantValue(double a[][SIZE], int n) {
  int i = 0, j = 0;
  double temp, result, b[SIZE][SIZE];
  if (n == 1) {
    result = a[0][0];
  } else if (n == 2) {
    result = a[0][0] * a[1][1] - a[0][1] * a[1][0];
  } else {
    result = 0.0;
    for (j = 0; j < n; j++) {
      SubMatrix(a, b, n, i, j);
      printf("Submatrix:\n");
      PrintMatrix(b, n - 1);
      temp = DeterminantValue(b, n - 1);
      result += pow(-1, i + j) * a[0][j] * temp;
      printf("DValue of the Submatrix is %6.1f\n", temp);
    }
  }
  return result;
}
//  函数功能： 计算n×n矩阵a中第row行col列元素的(n-1)×(n-1)子矩阵b
void SubMatrix(double a[][SIZE], double b[][SIZE], int n, int row, int col) {
  int i, j, ii = 0, jj = 0;
  for (i = 0; i < n; i++) {
    jj = 0;
    for (j = 0; j < n; j++) {
      if (i != row && j != col) {
        b[ii][jj] = a[i][j];
        jj++;
      }
    }
    if (i != row && j != col) {
      ii++;
    }
  }
}
//  函数功能： 输出一个n×n矩阵的元素
void PrintMatrix(double a[][SIZE], int n) {
  int i, j;
  for (i = 0; i < n; i++) {
    for (j = 0; j < n; j++) {
      printf("%6.1f\t", a[i][j]);
    }
    printf("\n");
  }
}


[4 answers found]